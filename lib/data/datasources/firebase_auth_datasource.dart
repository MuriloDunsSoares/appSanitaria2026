import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../core/config/firestore_collections.dart';
import '../../core/error/exceptions.dart';
import '../../core/utils/app_logger.dart';
import '../../domain/entities/patient_entity.dart';
import '../../domain/entities/professional_entity.dart';
import '../../domain/entities/user_entity.dart';

/// DataSource para autentica√ß√£o usando Firebase Auth
/// 
/// Respons√°vel por:
/// - Login/Logout usando Firebase Auth (apenas modo online)
/// - Registro de pacientes e profissionais
/// - Sincroniza√ß√£o de dados de usu√°rio com Firestore
/// - Verifica√ß√£o de conectividade
/// - Exibi√ß√£o de mensagens de erro quando offline
class FirebaseAuthDataSource {
  final FirebaseAuth _auth;
  final FirebaseFirestore _firestore;

  FirebaseAuthDataSource({
    FirebaseAuth? auth,
    FirebaseFirestore? firestore,
  })  : _auth = auth ?? FirebaseAuth.instance,
        _firestore = firestore ?? FirebaseFirestore.instance;

  // ==================== AUTENTICA√á√ÉO ====================

  /// Faz login com email e senha (apenas modo online)
  /// 
  /// Lan√ßa [InvalidCredentialsException] se credenciais inv√°lidas
  /// Lan√ßa [NetworkException] se sem conex√£o
  /// Lan√ßa [OfflineModeException] se tentar usar offline
  Future<UserEntity> login({
    required String email,
    required String password,
  }) async {
    try {
      AppLogger.info('üîê [FirebaseAuth] Iniciando login para: $email');
      AppLogger.info('üì° [FirebaseAuth] Verificando conex√£o com internet...');
      
      // Verificar conex√£o com internet primeiro
      try {
        await _firestore.runTransaction((transaction) async {
          // Apenas testa a conex√£o
          return null;
        });
        AppLogger.info('‚úÖ [FirebaseAuth] Conex√£o verificada com sucesso');
      } catch (e) {
        AppLogger.warning('‚ùå [FirebaseAuth] Sem conex√£o com internet detectada');
        throw const OfflineModeException(
          'Este aplicativo requer conex√£o com internet para funcionar.\n'
          'Por favor, verifique sua conex√£o e tente novamente.',
        );
      }

      AppLogger.info('üîë [FirebaseAuth] Autenticando no Firebase Auth...');

      // Autenticar no Firebase Auth
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      final uid = userCredential.user?.uid;
      AppLogger.info('üë§ [FirebaseAuth] UID obtido: $uid');
      
      if (uid == null) {
        AppLogger.error('‚ùå [FirebaseAuth] UID √© null ap√≥s autentica√ß√£o');
        throw const InvalidCredentialsException('Usu√°rio n√£o encontrado');
      }

      AppLogger.info('üìÑ [FirebaseAuth] Buscando dados do usu√°rio no Firestore...');
      
      // Buscar dados do usu√°rio no Firestore
      final userDoc = await _firestore
          .collection(FirestoreCollections.users)
          .doc(uid)
          .get();

      if (!userDoc.exists) {
        AppLogger.warning('‚ö†Ô∏è [FirebaseAuth] Documento do usu√°rio n√£o encontrado no Firestore');
        throw const StorageException('Dados do usu√°rio n√£o encontrados no Firestore');
      }

      final userData = userDoc.data()!;
      
      // Verificar se campo 'tipo' existe e n√£o √© null
      final userType = userData[FirestoreCollections.tipo] as String?;
      
      if (userType == null) {
        AppLogger.error('‚ùå [FirebaseAuth] Campo "tipo" est√° null no Firestore para UID: $uid');
        throw const StorageException(
          'Dados do usu√°rio incompletos. Campo "tipo" n√£o encontrado.',
        );
      }
      
      AppLogger.info('‚úÖ [FirebaseAuth] Dados do usu√°rio carregados. Tipo: $userType');

      // Retornar entidade apropriada (Patient ou Professional)
      if (userType == 'paciente') {
        AppLogger.info('‚úÖ [FirebaseAuth] Login bem-sucedido como PACIENTE');
        return PatientEntity.fromJson(userData);
      } else {
        AppLogger.info('‚úÖ [FirebaseAuth] Login bem-sucedido como PROFISSIONAL');
        return ProfessionalEntity.fromJson(userData);
      }
    } on OfflineModeException {
      AppLogger.warning('‚ö†Ô∏è [FirebaseAuth] OfflineModeException capturada - relan√ßando');
      rethrow;
    } on StorageException {
      AppLogger.warning('‚ö†Ô∏è [FirebaseAuth] StorageException capturada - relan√ßando');
      rethrow;
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå [FirebaseAuth] FirebaseAuthException: ${e.code}', error: e);
      AppLogger.error('Mensagem: ${e.message}');
      
      switch (e.code) {
        case 'user-not-found':
          AppLogger.info('üë§ [FirebaseAuth] Usu√°rio n√£o encontrado no Firebase Auth');
          throw const InvalidCredentialsException(
            'Email ou senha incorretos. Verifique e tente novamente.',
          );
        case 'wrong-password':
          AppLogger.info('üîë [FirebaseAuth] Senha incorreta fornecida');
          throw const InvalidCredentialsException(
            'Email ou senha incorretos. Verifique e tente novamente.',
          );
        case 'invalid-credential':
          AppLogger.info('üîë [FirebaseAuth] Credenciais inv√°lidas');
          throw const InvalidCredentialsException(
            'Email ou senha incorretos. Verifique e tente novamente.',
          );
        case 'user-disabled':
          AppLogger.info('üö´ [FirebaseAuth] Conta desativada');
          throw const InvalidCredentialsException('Esta conta foi desativada.');
        case 'too-many-requests':
          AppLogger.info('‚è∞ [FirebaseAuth] Muitas tentativas de login');
          throw const NetworkException(
            'Muitas tentativas de login. Tente novamente mais tarde.',
          );
        case 'network-request-failed':
          AppLogger.info('üì° [FirebaseAuth] Falha na requisi√ß√£o de rede');
          throw const OfflineModeException(
            'Este aplicativo requer conex√£o com internet para funcionar.\n'
            'Por favor, verifique sua conex√£o e tente novamente.',
          );
        default:
          AppLogger.error('‚ùì [FirebaseAuth] Erro desconhecido: ${e.code}');
          throw AuthenticationException('Erro ao fazer login: ${e.message}');
      }
    } catch (e, stackTrace) {
      AppLogger.error('üí• [FirebaseAuth] Erro inesperado durante login', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }

  /// Registra um novo paciente
  /// 
  /// Lan√ßa [EmailAlreadyExistsException] se email j√° cadastrado
  /// Lan√ßa [ValidationException] se dados inv√°lidos
  Future<PatientEntity> registerPatient(PatientEntity patient) async {
    try {
      AppLogger.info('Registrando paciente: ${patient.email}');

      // Criar conta no Firebase Auth
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: patient.email,
        password: patient.password,
      );

      final uid = userCredential.user?.uid;
      if (uid == null) {
        throw const AuthenticationException('Falha ao criar conta');
      }

      // Criar documento no Firestore
      final patientData = patient.toJson();
      patientData[FirestoreCollections.id] = uid;
      patientData[FirestoreCollections.tipo] = 'paciente'; // IMPORTANTE: garantir que tipo seja salvo
      patientData[FirestoreCollections.createdAt] = FieldValue.serverTimestamp();
      patientData[FirestoreCollections.updatedAt] = FieldValue.serverTimestamp();

      AppLogger.info('üìù [FirebaseAuth] Salvando dados no Firestore: ${patientData.keys.toList()}');
      
      await _firestore
          .collection(FirestoreCollections.users)
          .doc(uid)
          .set(patientData);

      AppLogger.info('‚úÖ Paciente registrado com sucesso: $uid');

      // Retornar entidade com ID atualizado
      return PatientEntity.fromJson({...patient.toJson(), 'id': uid});
    } on FirebaseAuthException catch (e) {
      AppLogger.error('Erro ao registrar paciente', error: e);

      switch (e.code) {
        case 'email-already-in-use':
          throw const EmailAlreadyExistsException(
            'Este email j√° est√° cadastrado. Tente fazer login.',
          );
        case 'invalid-email':
          throw const ValidationException('Email inv√°lido');
        case 'weak-password':
          throw const ValidationException(
            'Senha muito fraca. Use pelo menos 6 caracteres.',
          );
        case 'network-request-failed':
          throw const NetworkException(
            'Sem conex√£o com a internet. Verifique sua conex√£o.',
          );
        default:
          throw AuthenticationException('Erro ao registrar: ${e.message}');
      }
    } catch (e, stackTrace) {
      AppLogger.error('Erro inesperado ao registrar paciente', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }

  /// Registra um novo profissional
  /// 
  /// Lan√ßa [EmailAlreadyExistsException] se email j√° cadastrado
  /// Lan√ßa [ValidationException] se dados inv√°lidos
  Future<ProfessionalEntity> registerProfessional(
    ProfessionalEntity professional,
  ) async {
    try {
      AppLogger.info('Registrando profissional: ${professional.email}');

      // Criar conta no Firebase Auth
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: professional.email,
        password: professional.password,
      );

      final uid = userCredential.user?.uid;
      if (uid == null) {
        throw const AuthenticationException('Falha ao criar conta');
      }

      // Criar documento no Firestore
      final professionalData = professional.toJson();
      professionalData[FirestoreCollections.id] = uid;
      professionalData[FirestoreCollections.tipo] = 'profissional'; // IMPORTANTE: garantir que tipo seja salvo
      professionalData[FirestoreCollections.createdAt] = FieldValue.serverTimestamp();
      professionalData[FirestoreCollections.updatedAt] = FieldValue.serverTimestamp();
      professionalData[FirestoreCollections.avaliacao] = 0.0; // Avalia√ß√£o inicial

      AppLogger.info('üìù [FirebaseAuth] Salvando dados no Firestore: ${professionalData.keys.toList()}');
      
      await _firestore
          .collection(FirestoreCollections.users)
          .doc(uid)
          .set(professionalData);

      AppLogger.info('‚úÖ Profissional registrado com sucesso: $uid');

      // Retornar entidade com ID atualizado
      return ProfessionalEntity.fromJson({...professional.toJson(), 'id': uid, 'avaliacao': 0.0});
    } on FirebaseAuthException catch (e) {
      AppLogger.error('Erro ao registrar profissional', error: e);

      switch (e.code) {
        case 'email-already-in-use':
          throw const EmailAlreadyExistsException(
            'Este email j√° est√° cadastrado. Tente fazer login.',
          );
        case 'invalid-email':
          throw const ValidationException('Email inv√°lido');
        case 'weak-password':
          throw const ValidationException(
            'Senha muito fraca. Use pelo menos 6 caracteres.',
          );
        case 'network-request-failed':
          throw const NetworkException(
            'Sem conex√£o com a internet. Verifique sua conex√£o.',
          );
        default:
          throw AuthenticationException('Erro ao registrar: ${e.message}');
      }
    } catch (e, stackTrace) {
      AppLogger.error('Erro inesperado ao registrar profissional', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }

  /// Faz logout do usu√°rio
  Future<void> logout() async {
    try {
      AppLogger.info('Fazendo logout');
      await _auth.signOut();
      AppLogger.info('‚úÖ Logout realizado com sucesso');
    } catch (e, stackTrace) {
      AppLogger.error('Erro ao fazer logout', error: e, stackTrace: stackTrace);
      rethrow;
    }
  }

  /// Retorna o usu√°rio atualmente logado (se houver)
  Future<UserEntity?> getCurrentUser() async {
    try {
      final currentUser = _auth.currentUser;
      if (currentUser == null) {
        return null;
      }

      final uid = currentUser.uid;
      final userDoc = await _firestore
          .collection(FirestoreCollections.users)
          .doc(uid)
          .get();

      if (!userDoc.exists) {
        return null;
      }

      final userData = userDoc.data()!;
      
      // Verificar se campo 'tipo' existe e n√£o √© null
      final userType = userData[FirestoreCollections.tipo] as String?;
      
      if (userType == null) {
        AppLogger.error('‚ùå [FirebaseAuth] Campo "tipo" est√° null no getCurrentUser()');
        return null;
      }

      if (userType == 'paciente') {
        return PatientEntity.fromJson(userData);
      } else {
        return ProfessionalEntity.fromJson(userData);
      }
    } catch (e, stackTrace) {
      AppLogger.error('Erro ao buscar usu√°rio atual', error: e, stackTrace: stackTrace);
      return null;
    }
  }

  /// Verifica se h√° um usu√°rio autenticado
  Future<bool> isAuthenticated() async {
    return _auth.currentUser != null;
  }
}

