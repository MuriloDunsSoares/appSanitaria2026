// Mocks generated by Mockito 5.4.6 from annotations
// in app_sanitaria/test/data/repositories/profile_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:app_sanitaria/data/datasources/profile_storage_datasource.dart'
    as _i2;
import 'package:app_sanitaria/domain/entities/patient_entity.dart' as _i4;
import 'package:app_sanitaria/domain/entities/professional_entity.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ProfileStorageDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileStorageDataSource extends _i1.Mock
    implements _i2.ProfileStorageDataSource {
  MockProfileStorageDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String?> getProfileImage(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getProfileImage,
          [userId],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> saveProfileImage(
    String? userId,
    String? imagePath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProfileImage,
          [
            userId,
            imagePath,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteProfileImage(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteProfileImage,
          [userId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> savePatientProfile(_i4.PatientEntity? patient) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePatientProfile,
          [patient],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.PatientEntity?> getPatientProfile(String? patientId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPatientProfile,
          [patientId],
        ),
        returnValue: _i3.Future<_i4.PatientEntity?>.value(),
      ) as _i3.Future<_i4.PatientEntity?>);

  @override
  _i3.Future<void> saveProfessionalProfile(
          _i5.ProfessionalEntity? professional) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProfessionalProfile,
          [professional],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i5.ProfessionalEntity?> getProfessionalProfile(
          String? professionalId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfessionalProfile,
          [professionalId],
        ),
        returnValue: _i3.Future<_i5.ProfessionalEntity?>.value(),
      ) as _i3.Future<_i5.ProfessionalEntity?>);

  @override
  _i3.Future<void> clearAllProfiles() => (super.noSuchMethod(
        Invocation.method(
          #clearAllProfiles,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
