// Mocks generated by Mockito 5.4.6 from annotations
// in app_sanitaria/test/data/repositories/professionals_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:app_sanitaria/data/datasources/firebase_professionals_datasource.dart'
    as _i2;
import 'package:app_sanitaria/domain/entities/professional_entity.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [FirebaseProfessionalsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseProfessionalsDataSource extends _i1.Mock
    implements _i2.FirebaseProfessionalsDataSource {
  MockFirebaseProfessionalsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ProfessionalEntity>> getAllProfessionals() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProfessionals,
          [],
        ),
        returnValue: _i3.Future<List<_i4.ProfessionalEntity>>.value(
            <_i4.ProfessionalEntity>[]),
      ) as _i3.Future<List<_i4.ProfessionalEntity>>);

  @override
  _i3.Future<List<_i4.ProfessionalEntity>> searchProfessionals(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProfessionals,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.ProfessionalEntity>>.value(
            <_i4.ProfessionalEntity>[]),
      ) as _i3.Future<List<_i4.ProfessionalEntity>>);

  @override
  _i3.Future<_i4.ProfessionalEntity?> getProfessionalById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfessionalById,
          [id],
        ),
        returnValue: _i3.Future<_i4.ProfessionalEntity?>.value(),
      ) as _i3.Future<_i4.ProfessionalEntity?>);

  @override
  _i3.Future<List<_i4.ProfessionalEntity>> getProfessionalsByIds(
          List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfessionalsByIds,
          [ids],
        ),
        returnValue: _i3.Future<List<_i4.ProfessionalEntity>>.value(
            <_i4.ProfessionalEntity>[]),
      ) as _i3.Future<List<_i4.ProfessionalEntity>>);

  @override
  _i3.Future<void> updateProfessional(_i4.ProfessionalEntity? professional) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfessional,
          [professional],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateProfessionalRating(
    String? professionalId,
    double? newRating,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfessionalRating,
          [
            professionalId,
            newRating,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateProfessionalPhoto(
    String? professionalId,
    String? photoUrl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfessionalPhoto,
          [
            professionalId,
            photoUrl,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
