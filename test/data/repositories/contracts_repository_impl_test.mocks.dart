// Mocks generated by Mockito 5.4.6 from annotations
// in app_sanitaria/test/data/repositories/contracts_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_sanitaria/data/datasources/firebase_contracts_datasource.dart'
    as _i3;
import 'package:app_sanitaria/domain/entities/contract_entity.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeContractEntity_0 extends _i1.SmartFake
    implements _i2.ContractEntity {
  _FakeContractEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseContractsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseContractsDataSource extends _i1.Mock
    implements _i3.FirebaseContractsDataSource {
  MockFirebaseContractsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ContractEntity> createContract(_i2.ContractEntity? contract) =>
      (super.noSuchMethod(
        Invocation.method(
          #createContract,
          [contract],
        ),
        returnValue: _i4.Future<_i2.ContractEntity>.value(_FakeContractEntity_0(
          this,
          Invocation.method(
            #createContract,
            [contract],
          ),
        )),
      ) as _i4.Future<_i2.ContractEntity>);

  @override
  _i4.Future<List<_i2.ContractEntity>> getContractsByUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContractsByUser,
          [userId],
        ),
        returnValue:
            _i4.Future<List<_i2.ContractEntity>>.value(<_i2.ContractEntity>[]),
      ) as _i4.Future<List<_i2.ContractEntity>>);

  @override
  _i4.Future<List<_i2.ContractEntity>> getAllContracts() => (super.noSuchMethod(
        Invocation.method(
          #getAllContracts,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.ContractEntity>>.value(<_i2.ContractEntity>[]),
      ) as _i4.Future<List<_i2.ContractEntity>>);

  @override
  _i4.Future<List<_i2.ContractEntity>> getContractsByPatient(
          String? patientId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContractsByPatient,
          [patientId],
        ),
        returnValue:
            _i4.Future<List<_i2.ContractEntity>>.value(<_i2.ContractEntity>[]),
      ) as _i4.Future<List<_i2.ContractEntity>>);

  @override
  _i4.Future<List<_i2.ContractEntity>> getContractsByProfessional(
          String? professionalId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContractsByProfessional,
          [professionalId],
        ),
        returnValue:
            _i4.Future<List<_i2.ContractEntity>>.value(<_i2.ContractEntity>[]),
      ) as _i4.Future<List<_i2.ContractEntity>>);

  @override
  _i4.Future<_i2.ContractEntity?> getContractById(String? contractId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContractById,
          [contractId],
        ),
        returnValue: _i4.Future<_i2.ContractEntity?>.value(),
      ) as _i4.Future<_i2.ContractEntity?>);

  @override
  _i4.Future<void> updateContractStatus(
    String? contractId,
    String? newStatus,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateContractStatus,
          [
            contractId,
            newStatus,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateContract(_i2.ContractEntity? contract) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateContract,
          [contract],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteContract(String? contractId) => (super.noSuchMethod(
        Invocation.method(
          #deleteContract,
          [contractId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
