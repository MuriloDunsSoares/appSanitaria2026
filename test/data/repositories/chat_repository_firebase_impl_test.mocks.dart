// Mocks generated by Mockito 5.4.6 from annotations
// in app_sanitaria/test/data/repositories/chat_repository_firebase_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:app_sanitaria/data/datasources/firebase_chat_datasource.dart'
    as _i4;
import 'package:app_sanitaria/domain/entities/conversation_entity.dart' as _i2;
import 'package:app_sanitaria/domain/entities/message_entity.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeConversationEntity_0 extends _i1.SmartFake
    implements _i2.ConversationEntity {
  _FakeConversationEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageEntity_1 extends _i1.SmartFake implements _i3.MessageEntity {
  _FakeMessageEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseChatDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseChatDataSource extends _i1.Mock
    implements _i4.FirebaseChatDataSource {
  MockFirebaseChatDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i2.ConversationEntity>> getUserConversationsStream(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserConversationsStream,
          [userId],
        ),
        returnValue: _i5.Stream<List<_i2.ConversationEntity>>.empty(),
      ) as _i5.Stream<List<_i2.ConversationEntity>>);

  @override
  _i5.Future<_i2.ConversationEntity?> getConversationBetween(
    String? userId1,
    String? userId2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversationBetween,
          [
            userId1,
            userId2,
          ],
        ),
        returnValue: _i5.Future<_i2.ConversationEntity?>.value(),
      ) as _i5.Future<_i2.ConversationEntity?>);

  @override
  _i5.Future<_i2.ConversationEntity> createConversation(
    String? userId1,
    String? userId2,
    String? user1Name,
    String? user2Name,
    String? user2Specialty,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConversation,
          [
            userId1,
            userId2,
            user1Name,
            user2Name,
            user2Specialty,
          ],
        ),
        returnValue:
            _i5.Future<_i2.ConversationEntity>.value(_FakeConversationEntity_0(
          this,
          Invocation.method(
            #createConversation,
            [
              userId1,
              userId2,
              user1Name,
              user2Name,
              user2Specialty,
            ],
          ),
        )),
      ) as _i5.Future<_i2.ConversationEntity>);

  @override
  _i5.Stream<List<_i3.MessageEntity>> getMessagesStream(
          String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessagesStream,
          [conversationId],
        ),
        returnValue: _i5.Stream<List<_i3.MessageEntity>>.empty(),
      ) as _i5.Stream<List<_i3.MessageEntity>>);

  @override
  _i5.Future<_i3.MessageEntity> sendMessage({
    required String? conversationId,
    required String? senderId,
    required String? senderName,
    required String? receiverId,
    required String? text,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #conversationId: conversationId,
            #senderId: senderId,
            #senderName: senderName,
            #receiverId: receiverId,
            #text: text,
          },
        ),
        returnValue: _i5.Future<_i3.MessageEntity>.value(_FakeMessageEntity_1(
          this,
          Invocation.method(
            #sendMessage,
            [],
            {
              #conversationId: conversationId,
              #senderId: senderId,
              #senderName: senderName,
              #receiverId: receiverId,
              #text: text,
            },
          ),
        )),
      ) as _i5.Future<_i3.MessageEntity>);

  @override
  _i5.Future<void> markMessagesAsRead(
    String? conversationId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessagesAsRead,
          [
            conversationId,
            userId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteConversation(String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteConversation,
          [conversationId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
