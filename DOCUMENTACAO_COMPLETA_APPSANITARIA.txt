# DOCUMENTA√á√ÉO T√âCNICA COMPLETA - APPSANITARIA
## Aplicativo para Contrata√ß√£o de Profissionais da Sa√∫de

---

## üìã √çNDICE

1. [VIS√ÉO GERAL DO PROJETO](#vis√£o-geral-do-projeto)
2. [AN√ÅLISE DA ARQUITETURA](#an√°lise-da-arquitetura)
3. [AN√ÅLISE DETALHADA POR CAMADA](#an√°lise-detalhada-por-camada)
   - [Domain Layer](#domain-layer)
   - [Data Layer](#data-layer)
   - [Presentation Layer](#presentation-layer)
   - [Core Layer](#core-layer)
4. [FUNCIONALIDADES PRINCIPAIS](#funcionalidades-principais)
5. [FLUXOS DE NEG√ìCIO](#fluxos-de-neg√≥cio)
6. [AN√ÅLISE T√âCNICA](#an√°lise-t√©cnica)
7. [PADR√ïES E BOAS PR√ÅTICAS](#padr√µes-e-boas-pr√°ticas)
8. [CONFIGURA√á√ïES E AMBIENTE](#configura√ß√µes-e-ambiente)

---

## 1. VIS√ÉO GERAL DO PROJETO

### 1.1 Descri√ß√£o e Prop√≥sito
O **AppSanitaria** √© uma aplica√ß√£o m√≥vel desenvolvida em Flutter/Dart para conectar pacientes e profissionais de sa√∫de, facilitando o processo de contrata√ß√£o de servi√ßos de cuidado domiciliar e acompanhamento m√©dico.

**Prop√≥sito Principal:**
- Permitir que pacientes encontrem e contratem profissionais de sa√∫de qualificados
- Oferecer uma plataforma segura e confi√°vel para contrata√ß√£o de servi√ßos m√©dicos
- Facilitar a comunica√ß√£o entre pacientes e profissionais atrav√©s de chat integrado
- Gerenciar contratos, avalia√ß√µes e sistema de favoritos

**P√∫blico-Alvo:**
- Pacientes que precisam de cuidados domiciliares ou acompanhamento m√©dico
- Profissionais de sa√∫de (cuidadores, t√©cnicos de enfermagem, acompanhantes)
- Fam√≠lia de pacientes que buscam profissionais qualificados

### 1.2 Tecnologias Utilizadas

#### Flutter/Dart
- **Framework:** Flutter 3.x (Material Design 3)
- **Linguagem:** Dart (Null Safety habilitado)
- **Estado:** 2025 (√∫ltima verifica√ß√£o)

#### Gerenciamento de Estado
- **Riverpod:** ^2.6.1
  - Provider-based state management
  - Dependency Injection integrada
  - Reatividade autom√°tica
  - Suporte a testes

#### Persist√™ncia de Dados
- **SharedPreferences:** ^2.3.3
  - Armazenamento local chave-valor
  - Persist√™ncia offline de usu√°rios, conversas, contratos
  - Suporte multiplataforma (Android, iOS, Web)

#### Backend e Integra√ß√µes
- **Firebase:**
  - Authentication (email/senha)
  - Firestore (banco de dados NoSQL)
  - Cloud Messaging (notifica√ß√µes push)
  - Storage (imagens de perfil)

#### Outras Depend√™ncias
- **Go Router:** ^14.8.1 (navega√ß√£o declarativa)
- **Equatable:** ^2.0.5 (compara√ß√£o de objetos)
- **Dartz:** ^0.10.1 (programa√ß√£o funcional - Either)
- **Logger:** ^2.4.0 (logs estruturados)
- **GetIt:** ^7.6.7 (Service Locator)

### 1.3 Plataformas Suportadas
- **Android:** API Level 21+ (Android 5.0)
- **iOS:** iOS 12.0+
- **Web:** Chrome, Firefox, Safari (PWA compat√≠vel)

### 1.4 Caracter√≠sticas T√©cnicas
- **Arquitetura:** Clean Architecture
- **Padr√£o:** Repository Pattern
- **Estado:** Unidirectional Data Flow (Riverpod)
- **Navega√ß√£o:** Declarativa (GoRouter)
- **Persist√™ncia:** H√≠brida (Local + Firebase)
- **Testes:** Unit√°rios e de Integra√ß√£o

---

## 2. AN√ÅLISE DA ARQUITETURA

### 2.1 Arquitetura Geral (Clean Architecture)
O projeto segue os princ√≠pios da **Clean Architecture** proposta por Robert C. Martin (Uncle Bob), organizando o c√≥digo em camadas conc√™ntricas com responsabilidades bem definidas.

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                    Presentation Layer                    ‚îÇ
‚îÇ  ‚Ä¢ Screens, Widgets, State Management (Riverpod)       ‚îÇ
‚îÇ  ‚Ä¢ UI/UX, User Interactions, Navigation                ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                       Domain Layer                      ‚îÇ
‚îÇ  ‚Ä¢ Entities, Use Cases, Repository Interfaces          ‚îÇ
‚îÇ  ‚Ä¢ Business Rules, Domain Logic                        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                        Data Layer                       ‚îÇ
‚îÇ  ‚Ä¢ Repositories, DataSources, Models                   ‚îÇ
‚îÇ  ‚Ä¢ External Data Access, Storage, Network              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                        Core Layer                       ‚îÇ
‚îÇ  ‚Ä¢ Utils, Services, Constants, DI, Routes             ‚îÇ
‚îÇ  ‚Ä¢ Shared Infrastructure, Cross-cutting Concerns      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### 2.2 Princ√≠pios Aplicados

#### SOLID Principles
1. **Single Responsibility:** Cada classe tem uma √∫nica responsabilidade
2. **Open/Closed:** Extens√≠vel sem modificar c√≥digo existente
3. **Liskov Substitution:** Subtipos podem substituir tipos base
4. **Interface Segregation:** Interfaces espec√≠ficas e coesas
5. **Dependency Inversion:** Depend√™ncias em abstra√ß√µes, n√£o concretas

#### DRY (Don't Repeat Yourself)
- C√≥digo reutiliz√°vel atrav√©s de widgets e use cases gen√©ricos
- Configura√ß√µes centralizadas (AppConstants)
- Tratamento de erros padronizado (Failures)

#### Clean Code
- Nomenclatura descritiva e consistente
- Fun√ß√µes pequenas e focadas
- Coment√°rios explicativos
- Separa√ß√£o clara de responsabilidades

### 2.3 Estrutura de Pastas

```
lib/
‚îú‚îÄ‚îÄ core/                 # Camada de infraestrutura
‚îÇ   ‚îú‚îÄ‚îÄ constants/       # Valores imut√°veis (AppConstants)
‚îÇ   ‚îú‚îÄ‚îÄ di/             # Dependency Injection (GetIt)
‚îÇ   ‚îú‚îÄ‚îÄ error/          # Tratamento de erros (Failures)
‚îÇ   ‚îú‚îÄ‚îÄ providers/      # Providers Riverpod globais
‚îÇ   ‚îú‚îÄ‚îÄ routes/         # Configura√ß√£o de navega√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ services/       # Servi√ßos externos (Firebase)
‚îÇ   ‚îú‚îÄ‚îÄ utils/          # Fun√ß√µes auxiliares
‚îÇ   ‚îî‚îÄ‚îÄ widgets/        # Widgets reutiliz√°veis
‚îÇ
‚îú‚îÄ‚îÄ data/                # Camada de acesso a dados
‚îÇ   ‚îú‚îÄ‚îÄ datasources/    # Fontes de dados (Local/Firebase)
‚îÇ   ‚îú‚îÄ‚îÄ repositories/   # Implementa√ß√µes de reposit√≥rios
‚îÇ   ‚îî‚îÄ‚îÄ services/       # Servi√ßos espec√≠ficos
‚îÇ
‚îú‚îÄ‚îÄ domain/             # Camada de dom√≠nio
‚îÇ   ‚îú‚îÄ‚îÄ entities/       # Entidades de neg√≥cio
‚îÇ   ‚îú‚îÄ‚îÄ repositories/   # Interfaces de reposit√≥rios
‚îÇ   ‚îî‚îÄ‚îÄ usecases/       # Casos de uso
‚îÇ
‚îî‚îÄ‚îÄ presentation/       # Camada de apresenta√ß√£o
    ‚îú‚îÄ‚îÄ providers/      # State management (Riverpod)
    ‚îú‚îÄ‚îÄ screens/        # Telas da aplica√ß√£o
    ‚îî‚îÄ‚îÄ widgets/        # Componentes UI espec√≠ficos
```

### 2.4 Padr√µes de Desenvolvimento Aplicados

#### Repository Pattern
- Abstra√ß√£o entre Domain e Data layers
- Interfaces definidas no Domain, implementa√ß√µes no Data
- Facilita testes e troca de fontes de dados

#### Use Case Pattern
- Cada opera√ß√£o de neg√≥cio √© um Use Case
- Encapsula l√≥gica de neg√≥cio espec√≠fica
- Facilita reutiliza√ß√£o e testes

#### Dependency Injection
- GetIt como Service Locator
- Inje√ß√£o de depend√™ncias no main.dart
- Facilita testes e manuten√ß√£o

#### Provider Pattern (Riverpod)
- State management reativo
- Dependency injection integrada
- Testabilidade aprimorada

---

## 3. AN√ÅLISE DETALHADA POR CAMADA

### 3.1 Domain Layer

#### 3.1.1 Entidades (Entities)

##### UserEntity (Base)
```dart
abstract class UserEntity extends Equatable {
  final String id;
  final String nome;
  final String email;
  final String password;
  final String telefone;
  final DateTime dataNascimento;
  final String endereco;
  final String cidade;
  final String estado;
  final String sexo;
  final UserType tipo;
  final DateTime dataCadastro;

  // Getter calculado para idade
  int get idade;
  UserType get type => tipo;
}
```

**Caracter√≠sticas:**
- Classe abstrata base para todos os usu√°rios
- Implementa Equatable para compara√ß√£o por valor
- Campos obrigat√≥rios para identifica√ß√£o e contato
- M√©todo calculado para idade baseada na data de nascimento

##### PatientEntity
```dart
class PatientEntity extends UserEntity {
  final String condicoesMedicas;

  const PatientEntity({
    required super.id,
    required super.nome,
    required super.email,
    required super.password,
    required super.telefone,
    required super.dataNascimento,
    required super.endereco,
    required super.cidade,
    required super.estado,
    required super.sexo,
    required super.dataCadastro,
    this.condicoesMedicas = '',
  }) : super(tipo: UserType.paciente);
}
```

**Caracter√≠sticas:**
- Especializa√ß√£o de UserEntity para pacientes
- Campo adicional para condi√ß√µes m√©dicas
- Tipo fixo como UserType.paciente

##### ProfessionalEntity
```dart
class ProfessionalEntity extends UserEntity {
  final Speciality especialidade;
  final String formacao;
  final String certificados;
  final int experiencia; // Anos de experi√™ncia
  final String biografia;
  final double avaliacao;
  final double hourlyRate;
  final double? averageRating;
}
```

**Caracter√≠sticas:**
- Especializa√ß√£o para profissionais de sa√∫de
- Campos espec√≠ficos da profiss√£o (especialidade, forma√ß√£o, experi√™ncia)
- Sistema de avalia√ß√£o integrado
- Pre√ßo por hora definido
- Biografia opcional

##### Especialidades (Speciality)
```dart
enum Speciality {
  cuidadores('Cuidadores'),
  tecnicosEnfermagem('T√©cnicos de enfermagem'),
  enfermeiros('Enfermeiros'),
  acompanhantesHospital('Acompanhantes hospital'),
  acompanhanteDomiciliar('Acompanhante Domiciliar');
}
```

**Caracter√≠sticas:**
- 5 especialidades definidas
- M√©todo de busca case-insensitive
- Display names em portugu√™s

##### ContractEntity
```dart
class ContractEntity {
  final String id;
  final String patientId;
  final String professionalId;
  final String patientName;
  final String professionalName;
  final String serviceType;
  final String period; // 'Di√°rio', 'Semanal', 'Mensal'
  final int duration; // em horas
  final DateTime date;
  final String time;
  final String address;
  final String? observations;
  final ContractStatus status;
  final double totalValue;
  final DateTime createdAt;
  final DateTime? updatedAt;
}
```

**Caracter√≠sticas:**
- Representa contratos de servi√ßo
- Status controlado por enum ContractStatus
- Valor calculado baseado em dura√ß√£o e pre√ßo por hora
- Dados de ambas as partes envolvidas

##### ContractStatus
```dart
enum ContractStatus {
  pending,      // Aguardando Confirma√ß√£o
  confirmed,    // Confirmado
  active,       // Em Andamento
  completed,    // Finalizado
  cancelled     // Cancelado
}
```

**Caracter√≠sticas:**
- Estados bem definidos do ciclo de vida do contrato
- Display names traduzidos

##### ConversationEntity
```dart
class ConversationEntity {
  final String id;
  final List<String> participants;
  final String otherUserId;
  final String otherUserName;
  final String? otherUserSpecialty;
  final MessageEntity? lastMessage;
  final int unreadCount;
  final DateTime updatedAt;
}
```

**Caracter√≠sticas:**
- Representa conversas entre usu√°rios
- Controle de mensagens n√£o lidas
- √öltima mensagem para preview
- Identifica√ß√£o do outro participante

##### MessageEntity
```dart
class MessageEntity {
  final String id;
  final String conversationId;
  final String senderId;
  final String senderName;
  final String receiverId;
  final String text;
  final DateTime timestamp;
  final bool isRead;
}
```

**Caracter√≠sticas:**
- Mensagem individual em uma conversa
- Controle de leitura
- Timestamp para ordena√ß√£o cronol√≥gica
- Associa√ß√£o com conversa espec√≠fica

##### ReviewEntity
```dart
class ReviewEntity {
  final String id;
  final String professionalId;
  final String patientId;
  final String patientName;
  final int rating; // 1 a 5 estrelas
  final String comment;
  final DateTime createdAt;
}
```

**Caracter√≠sticas:**
- Sistema de avalia√ß√µes de profissionais
- Rating de 1 a 5 estrelas
- Coment√°rio opcional
- Associa√ß√£o com paciente e profissional

#### 3.1.2 Casos de Uso (Use Cases)

##### Autentica√ß√£o
- **LoginUser:** Autentica√ß√£o com email/senha
- **RegisterPatient:** Registro de pacientes
- **RegisterProfessional:** Registro de profissionais
- **GetCurrentUser:** Obter usu√°rio logado
- **LogoutUser:** Deslogar usu√°rio
- **CheckAuthentication:** Verificar sess√£o ativa

##### Profissionais
- **GetAllProfessionals:** Buscar todos os profissionais
- **SearchProfessionals:** Busca com filtros
- **GetProfessionalById:** Detalhes de profissional espec√≠fico
- **GetProfessionalsBySpeciality:** Filtrar por especialidade

##### Contratos
- **CreateContract:** Criar novo contrato
- **GetContractsByPatient:** Contratos do paciente
- **GetContractsByProfessional:** Contratos do profissional
- **UpdateContractStatus:** Atualizar status do contrato

##### Chat
- **GetUserConversations:** Conversas do usu√°rio
- **GetMessages:** Mensagens de uma conversa
- **SendMessage:** Enviar mensagem
- **MarkMessagesAsRead:** Marcar como lidas

##### Favoritos
- **GetFavorites:** Lista de favoritos
- **ToggleFavorite:** Adicionar/remover favorito

##### Avalia√ß√µes
- **AddReview:** Adicionar avalia√ß√£o
- **GetReviewsByProfessional:** Avalia√ß√µes de profissional
- **GetAverageRating:** M√©dia de avalia√ß√µes

##### Perfil
- **GetProfileImage:** Obter imagem do perfil
- **SaveProfileImage:** Salvar imagem do perfil
- **DeleteProfileImage:** Remover imagem do perfil

#### 3.1.3 Repository Interfaces

##### AuthRepository
- `login(email, password)`: Either<Failure, UserEntity>
- `register(entity)`: Either<Failure, UserEntity>
- `getCurrentUser()`: Either<Failure, UserEntity>
- `logout()`: Either<Failure, void>
- `isLoggedIn()`: bool
- `setKeepLoggedIn(bool)`: Future<void>

##### ProfessionalsRepository
- `getAllProfessionals()`: Either<Failure, List<ProfessionalEntity>>
- `searchProfessionals(...)`: Either<Failure, List<ProfessionalEntity>>
- `getProfessionalById(id)`: Either<Failure, ProfessionalEntity>
- `getProfessionalsBySpeciality(speciality)`: Either<Failure, List<ProfessionalEntity>>

##### ContractsRepository
- `createContract(contract)`: Either<Failure, ContractEntity>
- `getContractsByPatient(patientId)`: Either<Failure, List<ContractEntity>>
- `getContractsByProfessional(profId)`: Either<Failure, List<ContractEntity>>
- `updateContractStatus(id, status)`: Either<Failure, ContractEntity>

##### ChatRepository
- `getUserConversations(userId)`: Either<Failure, List<ConversationEntity>>
- `getMessages(conversationId)`: Either<Failure, List<MessageEntity>>
- `sendMessage(message)`: Either<Failure, MessageEntity>
- `markMessagesAsRead(conversationId, userId)`: Either<Failure, void>

##### FavoritesRepository
- `getFavorites(userId)`: Either<Failure, List<String>>
- `toggleFavorite(userId, professionalId)`: Either<Failure, bool>

##### ReviewsRepository
- `addReview(review)`: Either<Failure, ReviewEntity>
- `getReviewsByProfessional(profId)`: Either<Failure, List<ReviewEntity>>
- `getAverageRating(profId)`: Either<Failure, double>

### 3.2 Data Layer

#### 3.2.1 DataSources

##### Local Storage (SharedPreferences)
- **AuthStorageDataSource:** Gerencia dados de autentica√ß√£o local
- **ChatStorageDataSource:** Persist√™ncia de conversas
- **ContractsStorageDataSource:** Dados de contratos
- **FavoritesStorageDataSource:** Lista de favoritos
- **ProfileStorageDataSource:** Imagens de perfil
- **ReviewsStorageDataSource:** Avalia√ß√µes locais
- **UsersStorageDataSource:** Dados de usu√°rios

##### Firebase DataSources
- **FirebaseAuthDataSource:** Integra√ß√£o com Firebase Auth
- **FirebaseChatDataSource:** Chat em tempo real
- **FirebaseContractsDataSource:** Contratos sincronizados
- **FirebaseFavoritesDataSource:** Favoritos na nuvem
- **FirebaseProfessionalsDataSource:** Profissionais do Firebase
- **FirebaseReviewsDataSource:** Avalia√ß√µes sincronizadas

##### Hybrid DataSources
- **HybridAuthDataSource:** Combina Firebase + Local
- **HybridChatDataSource:** Estrat√©gia h√≠brida para chat

#### 3.2.2 Repository Implementations

##### AuthRepositoryFirebaseImpl
- Usa HybridAuthDataSource (Firebase + Local)
- Implementa cache local de sess√£o
- Sincroniza√ß√£o autom√°tica

##### ProfessionalsRepositoryImpl
- Usa UsersStorageDataSource
- Implementa filtros locais eficientes
- Busca por especialidade, cidade, rating

##### ContractsRepositoryImpl
- Persist√™ncia em Firebase
- Controle de status e hist√≥rico

##### ChatRepositoryFirebaseImpl
- Usa HybridChatDataSource
- Mensagens em tempo real
- Controle de leitura

##### FavoritesRepositoryImpl
- Lista de IDs de profissionais favoritados
- Persist√™ncia local

##### ReviewsRepositoryImpl
- Sistema de avalia√ß√µes
- C√°lculo de m√©dia autom√°tica

### 3.3 Presentation Layer

#### 3.3.1 State Management (Riverpod)

##### Providers V2 (Clean Architecture)

**AuthProviderV2**
```dart
class AuthNotifierV2 extends StateNotifier<AuthState> {
  final LoginUser _loginUser;
  final GetCurrentUser _getCurrentUser;
  final LogoutUser _logoutUser;
  final CheckAuthentication _checkAuthentication;

  Future<void> login(String email, String password, bool keepLoggedIn);
  Future<void> checkSession();
  Future<void> logout();
}
```

**ProfessionalsProviderV2**
```dart
class ProfessionalsNotifierV2 extends StateNotifier<ProfessionalsState> {
  final GetAllProfessionals _getAllProfessionals;
  final SearchProfessionals _searchProfessionals;

  Future<void> loadProfessionals();
  Future<void> searchProfessionals(String query);
  void setCity(String? city);
  void setSpecialty(String? specialty);
}
```

**ContractsProviderV2**
```dart
class ContractsNotifierV2 extends StateNotifier<ContractsState> {
  final GetContractsByPatient _getContractsByPatient;
  final GetContractsByProfessional _getContractsByProfessional;
  final CreateContract _createContract;

  Future<void> loadContracts();
  Future<void> createContract(ContractEntity contract);
}
```

**ChatProviderV2**
```dart
class ChatNotifierV2 extends StateNotifier<ChatState> {
  final GetUserConversations _getUserConversations;
  final GetMessages _getMessages;
  final SendMessage _sendMessage;

  Future<void> loadConversations();
  Future<void> loadMessages(String conversationId);
  Future<void> sendMessage(String conversationId, String text);
}
```

#### 3.3.2 Screens (Telas)

##### Autentica√ß√£o
- **LoginScreen:** Tela de login com email/senha
- **SelectionScreen:** Escolha entre paciente/profissional
- **PatientRegistrationScreen:** Cadastro de pacientes
- **ProfessionalRegistrationScreen:** Cadastro de profissionais

##### Paciente
- **HomePatientScreen:** Dashboard do paciente
- **ProfessionalsListScreen:** Lista de profissionais com filtros
- **ProfessionalProfileDetailScreen:** Detalhes do profissional
- **ConversationsScreen:** Lista de conversas
- **IndividualChatScreen:** Chat individual
- **FavoritesScreen:** Profissionais favoritados
- **HiringScreen:** Contrata√ß√£o de profissional
- **ContractsScreen:** Contratos ativos
- **ContractDetailScreen:** Detalhes do contrato
- **AddReviewScreen:** Avalia√ß√£o de profissional
- **ProfileScreen:** Perfil do usu√°rio

##### Profissional
- **HomeProfessionalScreen:** Dashboard do profissional

#### 3.3.3 Widgets Reutiliz√°veis

##### Cards
- **ProfessionalCard:** Card de profissional na lista
- **ContractCard:** Card de contrato
- **ConversationCard:** Card de conversa

##### Componentes
- **MessageBubble:** Bolha de mensagem no chat
- **RatingStars:** Sistema de estrelas para avalia√ß√µes
- **PatientBottomNav:** Navega√ß√£o inferior para pacientes
- **ProfessionalFloatingButtons:** Bot√µes flutuantes

##### Formul√°rios
- **ProfileImagePicker:** Seletor de imagem de perfil
- **ReviewCard:** Card de avalia√ß√£o

### 3.4 Core Layer

#### 3.4.1 Dependency Injection (GetIt)

**Setup no main.dart:**
```dart
Future<void> setupDependencyInjection() async {
  // Core
  sl.registerLazySingleton<Logger>(() => Logger());
  final sharedPreferences = await SharedPreferences.getInstance();
  sl.registerLazySingleton<SharedPreferences>(() => sharedPreferences);

  // DataSources
  sl.registerLazySingleton<FirebaseAuthDataSource>(() => FirebaseAuthDataSource());
  sl.registerLazySingleton<HybridAuthDataSource>(() => HybridAuthDataSource(
    firebaseAuth: sl(),
    localAuth: sl(),
  ));

  // Repositories
  sl.registerLazySingleton<AuthRepository>(() => AuthRepositoryFirebaseImpl(
    hybridAuthDataSource: sl(),
    authStorageDataSource: sl(),
  ));

  // Use Cases
  sl.registerLazySingleton(() => LoginUser(sl()));
  sl.registerLazySingleton(() => GetCurrentUser(sl()));
  sl.registerLazySingleton(() => LogoutUser(sl()));
  sl.registerLazySingleton(() => CheckAuthentication(sl()));
}
```

#### 3.4.2 Routes (GoRouter)

**Configura√ß√£o de navega√ß√£o:**
```dart
final goRouterProvider = Provider<GoRouter>((ref) {
  final authState = ref.watch(authProviderV2);

  return GoRouter(
    initialLocation: '/',
    debugLogDiagnostics: true,
    redirect: (context, state) {
      final isAuthenticated = authState.isAuthenticated;
      final userType = authState.userType;
      final isOnLoginPage = state.matchedLocation == '/';

      if (isAuthenticated && isOnLoginPage) {
        return userType == UserType.paciente
            ? '/home/patient'
            : '/home/professional';
      }

      return null;
    },
    routes: [
      GoRoute(path: '/', builder: (context, state) => const LoginScreen()),
      GoRoute(path: '/home/patient', builder: (context, state) => const HomePatientScreen()),
      GoRoute(path: '/home/professional', builder: (context, state) => const HomeProfessionalScreen()),
      // ... outras rotas
    ],
  );
});
```

#### 3.4.3 Services

**FirebaseService**
- Inicializa√ß√£o do Firebase
- Configura√ß√£o do FCM (Firebase Cloud Messaging)
- Gerenciamento de tokens de notifica√ß√£o

**ImagePickerService**
- Sele√ß√£o e upload de imagens de perfil
- Compress√£o e otimiza√ß√£o de imagens

#### 3.4.4 Error Handling (Failures)

**Hierarquia de Failures:**
```dart
abstract class Failure extends Equatable {
  final String message;
  const Failure(this.message);
}

// Auth Failures
class InvalidCredentialsFailure extends Failure
class EmailAlreadyExistsFailure extends Failure

// Validation Failures
class ValidationFailure extends Failure

// Storage Failures
class StorageFailure extends Failure
class NotFoundFailure extends Failure

// Network Failures (preparado para futuro)
class NetworkFailure extends Failure
class ServerFailure extends Failure
```

#### 3.4.5 Constants (AppConstants)

**Categorias de constantes:**

**Storage Keys:**
- `storageKeyHostList`: Lista de usu√°rios cadastrados
- `storageKeyUserData`: Dados do usu√°rio logado
- `storageKeyCurrentUserId`: ID do usu√°rio atual
- `storageKeyFavorites`: Favoritos por usu√°rio

**Validation:**
- `minPasswordLength`: 6 caracteres
- `minAge`: 18 anos (maioridade)
- `maxAge`: 120 anos (valida√ß√£o)

**Pagination:**
- `professionalsPerPage`: 20 profissionais
- `messagesPerPage`: 50 mensagens

**Rating:**
- `minRating`: 0.0 (sem avalia√ß√µes)
- `maxRating`: 5.0 (5 estrelas)
- `defaultRating`: 4.5 (para novos profissionais)

**Especialidades:**
```dart
static const List<String> professionalSpecialties = [
  'Cuidadores',
  'T√©cnicos de enfermagem',
  'Acompanhantes hospital',
  'Acompanhante Domiciliar',
];
```

**Cidades:**
- Mapa com todas as 27 capitais brasileiras
- Organiza√ß√£o por regi√£o geogr√°fica

---

## 4. FUNCIONALIDADES PRINCIPAIS

### 4.1 Sistema de Autentica√ß√£o
**Funcionalidades:**
- Login com email e senha
- Registro de pacientes e profissionais
- Persist√™ncia de sess√£o ("manter logado")
- Auto-login ao abrir aplicativo
- Logout seguro

**Fluxo de Login:**
1. Usu√°rio insere email e senha
2. Valida√ß√£o local de formato
3. Chamada para AuthRepository
4. Verifica√ß√£o no Firebase Auth
5. Cache local de dados do usu√°rio
6. Redirect para tela apropriada (paciente/profissional)

**Dados Persistidos:**
- Dados completos do usu√°rio (JSON)
- ID do usu√°rio (otimiza√ß√£o)
- Estado de autentica√ß√£o
- Prefer√™ncia "manter logado"

### 4.2 Listagem e Busca de Profissionais
**Funcionalidades:**
- Lista paginada de profissionais
- Busca por nome ou especialidade
- Filtros avan√ßados (cidade, especialidade, rating, pre√ßo)
- Ordena√ß√£o por dist√¢ncia/relev√¢ncia

**Filtros Dispon√≠veis:**
- Query de busca (nome/especialidade)
- Especialidade espec√≠fica
- Cidade
- Rating m√≠nimo
- Pre√ßo m√°ximo/m√≠nimo
- Anos de experi√™ncia
- Disponibilidade atual

**Implementa√ß√£o:**
- Busca local eficiente usando √≠ndices
- Filtros aplicados em mem√≥ria
- Estado reativo com Riverpod
- Debounce na busca (500ms)

### 4.3 Sistema de Chat/Mensagens
**Funcionalidades:**
- Conversas individuais entre pacientes e profissionais
- Mensagens em tempo real (preparado para Firebase)
- Controle de mensagens n√£o lidas
- Persist√™ncia offline de mensagens

**Arquitetura:**
- ConversationEntity para conversas
- MessageEntity para mensagens individuais
- Controle de leitura autom√°tico
- Preview da √∫ltima mensagem

**Estados das Mensagens:**
- Enviada (timestamp)
- Recebida (n√£o lida)
- Lida (marcada como visualizada)

### 4.4 Sistema de Contratos/Hiring
**Funcionalidades:**
- Cria√ß√£o de contratos de servi√ßo
- Gerenciamento de status do contrato
- Controle de dura√ß√£o e pre√ßo
- Hist√≥rico de contratos

**Status de Contrato:**
1. **Pending:** Aguardando confirma√ß√£o do profissional
2. **Confirmed:** Aceito pelo profissional
3. **Active:** Servi√ßo em andamento
4. **Completed:** Servi√ßo finalizado
5. **Cancelled:** Cancelado por alguma das partes

**Dados do Contrato:**
- Dados do paciente e profissional
- Tipo de servi√ßo e per√≠odo
- Dura√ß√£o em horas
- Data, hor√°rio e endere√ßo
- Valor total calculado
- Observa√ß√µes opcionais

### 4.5 Sistema de Avalia√ß√µes/Reviews
**Funcionalidades:**
- Avalia√ß√£o de 1 a 5 estrelas
- Coment√°rio opcional
- M√©dia de avalia√ß√µes por profissional
- Hist√≥rico de avalia√ß√µes recebidas

**C√°lculo de Rating:**
- M√©dia ponderada das avalia√ß√µes
- Profissionais novos: rating padr√£o 4.5
- Atualiza√ß√£o em tempo real

### 4.6 Gerenciamento de Favoritos
**Funcionalidades:**
- Adicionar/remover profissionais favoritos
- Lista personalizada de favoritos
- Acesso r√°pido a profissionais preferidos
- Sincroniza√ß√£o entre dispositivos

**Persist√™ncia:**
- Lista de IDs de profissionais favoritados
- Chave espec√≠fica por usu√°rio
- Carregamento eficiente

### 4.7 Perfis de Usu√°rio
**Funcionalidades:**
- Visualiza√ß√£o e edi√ß√£o de perfil
- Upload de imagem de perfil
- Dados pessoais e profissionais
- Configura√ß√µes de privacidade

**Dados do Perfil:**
- Informa√ß√µes b√°sicas (nome, email, telefone)
- Dados espec√≠ficos (condi√ß√µes m√©dicas para pacientes)
- Especialidade e experi√™ncia (para profissionais)
- Imagem de perfil opcional

---

## 5. FLUXOS DE NEG√ìCIO

### 5.1 Fluxo Completo de Contrata√ß√£o

**Pr√©-requisitos:** Usu√°rio logado como paciente

1. **Descoberta (HomePatientScreen)**
   - Visualiza√ß√£o de especialidades dispon√≠veis
   - Sele√ß√£o de categoria (Cuidadores, Enfermeiros, etc.)

2. **Busca e Filtros (ProfessionalsListScreen)**
   - Lista inicial de profissionais
   - Aplica√ß√£o de filtros (cidade, especialidade, pre√ßo)
   - Busca por nome
   - Visualiza√ß√£o de detalhes de profissional

3. **Sele√ß√£o do Profissional (ProfessionalProfileDetailScreen)**
   - Visualiza√ß√£o completa do perfil
   - Avalia√ß√µes e coment√°rios
   - Verifica√ß√£o de disponibilidade
   - Adi√ß√£o aos favoritos (opcional)

4. **Contrata√ß√£o (HiringScreen)**
   - Sele√ß√£o de per√≠odo (di√°rio, semanal, mensal)
   - Defini√ß√£o de dura√ß√£o (horas)
   - Escolha de data e hor√°rio
   - Informar endere√ßo
   - Adicionar observa√ß√µes
   - Confirma√ß√£o e cria√ß√£o do contrato

5. **Processo do Contrato**
   - **Paciente:** Contrato em "Pending"
   - **Profissional:** Recebe notifica√ß√£o
   - **Profissional:** Pode aceitar/recusar
   - **Paciente:** Acompanha status

6. **Execu√ß√£o do Servi√ßo**
   - **Status:** "Active" durante execu√ß√£o
   - **Chat:** Comunica√ß√£o durante o servi√ßo
   - **Finaliza√ß√£o:** Profissional marca como conclu√≠do

7. **Avalia√ß√£o (AddReviewScreen)**
   - Paciente avalia o servi√ßo (1-5 estrelas)
   - Coment√°rio opcional
   - Atualiza√ß√£o da m√©dia do profissional

### 5.2 Fluxo de Comunica√ß√£o

**Pr√©-requisitos:** Usu√°rio logado e contrato ativo

1. **In√≠cio da Conversa**
   - Profissional e paciente podem iniciar conversa
   - Cria√ß√£o autom√°tica de ConversationEntity
   - Associa√ß√£o com IDs dos participantes

2. **Envio de Mensagens**
   - Digita√ß√£o no IndividualChatScreen
   - Cria√ß√£o de MessageEntity
   - Persist√™ncia local e Firebase
   - Controle de leitura autom√°tico

3. **Sincroniza√ß√£o**
   - Mensagens salvas localmente (offline)
   - Sincroniza√ß√£o com Firebase quando online
   - Controle de conflitos (timestamp)

4. **Notifica√ß√µes**
   - Push notifications para mensagens n√£o lidas
   - Badge com contador de mensagens
   - Som e vibra√ß√£o configur√°veis

### 5.3 Fluxo de Registro

**Paciente:**
1. Sele√ß√£o do tipo (SelectionScreen)
2. Preenchimento do formul√°rio (PatientRegistrationScreen)
3. Valida√ß√£o de dados (idade m√≠nima 18 anos)
4. Cria√ß√£o da conta no Firebase
5. Cache local dos dados
6. Redirect para HomePatientScreen

**Profissional:**
1. Sele√ß√£o do tipo (SelectionScreen)
2. Preenchimento do formul√°rio (ProfessionalRegistrationScreen)
3. Dados espec√≠ficos (especialidade, forma√ß√£o, experi√™ncia)
4. Upload opcional de certificados
5. Valida√ß√£o e cria√ß√£o da conta
6. Redirect para HomeProfessionalScreen

---

## 6. AN√ÅLISE T√âCNICA

### 6.1 Tratamento de Erros

#### Failures vs Exceptions
- **Failures:** Erros de neg√≥cio no Domain (Either<Failure, Success>)
- **Exceptions:** Erros t√©cnicos no Data (convertidos para Failures)

#### Tipos de Failure
```dart
// Auth
InvalidCredentialsFailure
EmailAlreadyExistsFailure
SessionExpiredFailure

// Validation
ValidationFailure

// Storage
StorageFailure
NotFoundFailure

// Network (preparado)
NetworkFailure
ServerFailure

// Generic
UnexpectedFailure
```

#### Tratamento em Use Cases
```dart
Future<Either<Failure, UserEntity>> call(LoginParams params) async {
  final result = await repository.login(
    email: params.email,
    password: params.password,
  );

  return result.fold(
    (failure) => Left(failure), // Propaga failure
    (user) async {
      await repository.setKeepLoggedIn(params.keepLoggedIn);
      return Right(user); // Sucesso
    },
  );
}
```

### 6.2 Tratamento de Estado Ass√≠ncrono

#### Estados de Loading
```dart
class ProfessionalsState {
  final List<ProfessionalEntity> professionals;
  final bool isLoading;
  final String? errorMessage;
  // ... outros campos
}
```

#### Estados de Error
- Mensagens de erro traduzidas
- Tratamento espec√≠fico por tipo de erro
- Recupera√ß√£o autom√°tica quando poss√≠vel

#### Estados de Sucesso
- Dados normalizados e validados
- Cache inteligente de resultados
- Estado consistente entre rebuilds

### 6.3 Performance e Otimiza√ß√µes

#### Lazy Loading
- Telas carregadas apenas quando navegadas
- Providers criados sob demanda
- Recursos liberados quando n√£o utilizados

#### Memoiza√ß√£o
- Riverpod cache inteligente
- Reconstru√ß√£o apenas quando depend√™ncias mudam
- Providers com `.family` para parametriza√ß√£o

#### Otimiza√ß√µes de UI
- ListView.builder para listas grandes
- Hero animations para transi√ß√µes suaves
- Debounce em buscas (500ms)
- Compress√£o de imagens de perfil

### 6.4 Testes Implementados

#### Cobertura de Testes
- **Unit√°rios:** Use Cases, Repositories, Utils
- **Integra√ß√£o:** Fluxos completos, Providers
- **Widgets:** Componentes UI cr√≠ticos

#### Testes de Use Cases
```dart
test('LoginUser should return user when credentials are valid', () async {
  // Arrange
  final repository = MockAuthRepository();
  final useCase = LoginUser(repository);

  // Act
  final result = await useCase.call(LoginParams(
    email: 'test@example.com',
    password: 'password123',
    keepLoggedIn: true,
  ));

  // Assert
  expect(result, isA<Right<Failure, UserEntity>>());
});
```

#### Testes de Providers
```dart
test('ProfessionalsNotifierV2 should load professionals on init', () async {
  // Arrange
  final container = ProviderContainer();

  // Act
  final notifier = container.read(professionalsProviderV2.notifier);

  // Assert
  expect(notifier.state.isLoading, true);
});
```

---

## 7. PADR√ïES E BOAS PR√ÅTICAS

### 7.1 Aplica√ß√£o dos Princ√≠pios SOLID

#### Single Responsibility
- Cada Use Case tem uma responsabilidade √∫nica
- Repositories focados em uma entidade
- Providers espec√≠ficos por dom√≠nio

#### Open/Closed
- Extens√£o sem modificar c√≥digo existente
- Interfaces bem definidas no Domain
- Implementa√ß√µes substitu√≠veis no Data

#### Liskov Substitution
- PatientEntity e ProfessionalEntity podem substituir UserEntity
- Firebase e Local repositories s√£o intercambi√°veis

#### Interface Segregation
- Repositories com m√©todos espec√≠ficos
- Interfaces coesas e focadas
- N√£o h√° m√©todos vazios ou desnecess√°rios

#### Dependency Inversion
- Domain depende apenas de abstra√ß√µes
- Data implementa contratos do Domain
- Inje√ß√£o de depend√™ncias via GetIt

### 7.2 Clean Architecture Compliance

#### Camadas Bem Definidas
- **Domain:** Regras de neg√≥cio puras
- **Data:** Acesso a dados externos
- **Presentation:** Interface e estado
- **Core:** Infraestrutura compartilhada

#### Depend√™ncias Unidirecionais
```
Presentation ‚Üí Domain ‚Üê Data
     ‚Üì           ‚Üì       ‚Üì
   Core ‚Üê‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Core ‚Üê‚îÄ Core
```

#### Independ√™ncia do Framework
- Domain n√£o depende de Flutter/Riverpod
- Testabilidade sem interface gr√°fica
- Portabilidade para outras plataformas

### 7.3 Tratamento de Null Safety

#### Tipos N√£o-Nulos
```dart
class UserEntity {
  final String id;        // N√£o-nulo
  final String nome;      // N√£o-nulo
  final String? biografia; // Opcional
}
```

#### Late Initialization
```dart
class AuthNotifierV2 extends StateNotifier<AuthState> {
  late final LoginUser _loginUser;
  late final GetCurrentUser _getCurrentUser;

  AuthNotifierV2() : super(AuthState.initial()) {
    _loginUser = getIt<LoginUser>();
    _getCurrentUser = getIt<GetCurrentUser>();
  }
}
```

#### Null Checks Estruturados
```dart
final user = await _getCurrentUser.call(NoParams());
user.fold(
  (failure) => state = state.copyWithError(failure.message),
  (user) => state = state.copyWithUser(user),
);
```

### 7.4 Organiza√ß√£o do C√≥digo

#### Nomenclatura Consistente
- **Classes:** PascalCase (UserEntity, LoginUser)
- **M√©todos:** camelCase (getAllProfessionals)
- **Arquivos:** snake_case (login_user.dart)
- **Constantes:** camelCase (minPasswordLength)

#### Arquivos Pequenos e Focados
- Cada Use Case em arquivo separado
- Repositories com responsabilidades √∫nicas
- Screens modulares e test√°veis

#### Coment√°rios Explicativos
- Documenta√ß√£o inline detalhada
- Exemplos de uso
- Explica√ß√£o de decis√µes de design

### 7.5 Documenta√ß√£o Inline

#### Padr√£o de Coment√°rios
```dart
/// Classe respons√°vel por [prop√≥sito claro].
///
/// **Responsabilidades:**
/// 1. [Responsabilidade espec√≠fica]
/// 2. [Outra responsabilidade]
///
/// **Como usar:**
/// ```dart
/// final useCase = UseCaseName();
/// final result = await useCase.call(params);
/// ```
///
/// **Padr√µes aplicados:**
/// - [Padr√£o espec√≠fico usado]
class UseCaseName {
  /// M√©todo que [faz algo espec√≠fico].
  ///
  /// **Par√¢metros:**
  /// - [param1]: [descri√ß√£o]
  /// - [param2]: [descri√ß√£o]
  ///
  /// **Retorna:**
  /// - [Tipo]: [descri√ß√£o]
  Future<Tipo> metodo() async {
    // Implementa√ß√£o
  }
}
```

---

## 8. CONFIGURA√á√ïES E AMBIENTE

### 8.1 Firebase Setup

#### Projeto Firebase
- Projeto criado no Firebase Console
- Configura√ß√µes para Android, iOS e Web
- Authentication habilitado
- Firestore configurado
- Cloud Messaging ativado

#### Arquivo de Configura√ß√£o
```dart
// lib/firebase_options.dart (gerado automaticamente)
const FirebaseOptions currentPlatform = {
  apiKey: "...",
  appId: "...",
  messagingSenderId: "...",
  projectId: "appsanitaria",
  // ... outras configura√ß√µes
};
```

#### Inicializa√ß√£o no main.dart
```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Inicializar Firebase
  await FirebaseService().initialize();

  // Configurar DI
  await setupDependencyInjection();

  runApp(const AppSanitaria());
}
```

### 8.2 SharedPreferences Estrutura

#### Chaves Utilizadas
```dart
// Usu√°rios
'appSanitaria_hostList'      // Lista completa de usu√°rios
'appSanitaria_userData'      // Dados do usu√°rio logado
'appSanitaria_currentUserId' // ID do usu√°rio atual

// Favoritos (por usu√°rio)
'appSanitaria_favorites_$userId' // Lista de favoritos

// Outros dados
'appSanitaria_patients'
'appSanitaria_professionals'
'appSanitaria_profile_images'
```

#### Dados Armazenados
- **Usu√°rios:** JSON serializado com todos os dados
- **Favoritos:** Array de IDs de profissionais
- **Imagens:** Base64 encoded (para perfil)
- **Sess√£o:** Dados do usu√°rio logado

### 8.3 Vari√°veis de Ambiente

#### Arquivo .env (n√£o implementado no MVP)
```bash
# Firebase
FIREBASE_API_KEY=your_api_key
FIREBASE_PROJECT_ID=appsanitaria
FIREBASE_MESSAGING_SENDER_ID=123456789

# API (futuro)
API_BASE_URL=https://api.appsanitaria.com
API_TIMEOUT=30000

# Configura√ß√µes
APP_NAME=App Sanit√°ria
DEBUG_MODE=false
```

### 8.4 Build Configurations

#### Flavors (preparado para futuro)
- **Development:** Firebase dev project, logs habilitados
- **Staging:** Firebase staging project, testes limitados
- **Production:** Firebase production, logs m√≠nimos

#### Android (android/app/build.gradle)
```gradle
android {
    defaultConfig {
        applicationId "com.appsanitaria.app"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0.0"
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }
}
```

#### iOS (ios/Runner/Info.plist)
```xml
<key>CFBundleDisplayName</key>
<string>App Sanit√°ria</string>
<key>CFBundleVersion</key>
<string>1.0.0</string>
<key>CFBundleShortVersionString</key>
<string>1.0.0</string>
<key>UIApplicationSupportsIndirectInputEvents</key>
<true/>
```

---

## üìñ EXEMPLOS DE USO

### Usando um Use Case
```dart
final loginUseCase = getIt<LoginUser>();
final result = await loginUseCase.call(LoginParams(
  email: 'usuario@email.com',
  password: 'senha123',
  keepLoggedIn: true,
));

result.fold(
  (failure) => print('Erro: ${failure.message}'),
  (user) => print('Login sucesso: ${user.nome}'),
);
```

### Usando um Provider
```dart
class MyScreen extends ConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final professionalsState = ref.watch(professionalsProviderV2);

    if (professionalsState.isLoading) {
      return const CircularProgressIndicator();
    }

    if (professionalsState.errorMessage != null) {
      return Text('Erro: ${professionalsState.errorMessage}');
    }

    return ListView.builder(
      itemCount: professionalsState.filteredProfessionals.length,
      itemBuilder: (context, index) {
        final professional = professionalsState.filteredProfessionals[index];
        return ProfessionalCard(professional: professional);
      },
    );
  }
}
```

### Navega√ß√£o
```dart
// Navega√ß√£o simples
context.go('/professionals');

// Navega√ß√£o com par√¢metros
context.go('/professional/123');

// Navega√ß√£o com query params
context.go('/chat/456?name=Jo√£o&specialty=Enfermeiro');

// Push para empilhar rota
context.push('/hiring/123');
```

---

**AppSanitaria 2025** - Documenta√ß√£o t√©cnica completa e detalhada para facilitar manuten√ß√£o e desenvolvimento futuro do projeto.



